General Skills
	Bases - Python, import base64, use base64.b64decode('bDNhcm5fdGgzX3IwcDM1')
		flag: picoCTF{l3arn_th3_r0p35}
	Resources - Navigate to page link, skroll down
		flag: picoCTF{r3source_pag3_f1ag}
	First Grep - Connect to shell server, cd to specified directory, ls to learn file name, grep 'pico' file to return flag
		flag: picoCTF{grep_is_good_to_find_things_4b2451ea}
	strings it - Connect to shell server at specified folder, ls to learn file name, then strings strings | grep 'pico' for flag
		flag: picoCTF{5tRIng5_1T_dd210c06}
	what's a net cat? - Shell server, nc 2019shell1.picoctf.com 49816 to connect to their server, which returns the flag
		flag: picoCTF{nEtCat_Mast3ry_a752a0d3}
	First Grep: Part II - cd to correct directory, then grep -r 'pico' to use grep recruse function and look through each directory in the file tree
		flag: picoCTF{grep_r_to_find_this_0898e9c9}
	plumbing - use netcat to connect and then pipe the output to grep, nc 2019shell1.picoctf.com 18944 | grep 'pico'
		flag: picoCTF{digital_plumb3r_1d5b7de7}
	Based - wrote a python script that allowed entry of each successive value, split values into a list and then converted one at a time with chr(int(value, base))
		flag: picoCTF{learning_about_converting_values_502ff297}
	where-is-the-file - cd to the specified directory, then ran the command ls -a to see all hidden file names, then ran cat .cant_see_me
		flag: picoCTF{w3ll_that_d1dnt_w0RK_30444bc6}
	whats-the-difference - had some trouble with this one; first ray of light in shell "diff <(strings kitters.jpg) <(cattos.jpg); ended up writing a Python script to search each file for differences, and then turn each difference into an ASCII character using chr()
		flag: picoCTF{th3yr3_a5_d1ff3r3nt_4s_bu773r_4nd_j311y_aslkjfdsalkfslkflkjdsfdszmz10548}
	flag shop - used netcat to connect to the specified port; examined the source .c file and found that the variable for number_flags was an int (signed int, max value of 2147483647). Values greater than this roll over to negative, so I entered 2386095, which multiplied by 900 (cost of flag) became negative and was then added to my account balance.
		flag: picoCTF{m0n3y_bag5_b9f469b5}

Forensics	
	unzip - download the zipped folder and extract all, then open the .png file
		flag: picoCTF{unz1pp1ng_1s_3a5y}
	Glory of the Garden - opened the provided .jpg file in a Hex Editor and scrolled to the end of the file. Could have performed a search just as easily.
		flag: picoCTF{more_than_m33ts_the_3y31e0af5C7}
	So Meta - provided a .png file, again used a Hex Editor and searched 'pico', exported the selected bytes to a text file.
		flag: picoCTF{s0_m3ta_9a16fd1d}
	extensions - given a "text" file that opened, but had the header .png at the beginning of the file, so I added the extension and then opened the file with Paint.
		flag: picoCTF{now_you_know_about_extensions}
	c0rrupt - 
		flag:
	shark on wire 1 - out of my depth here, hand to rely on John Hammond to write a Python script for this one; starting to look at these challenges more as a learning opportunity; my skills are not high enough to complete them on my own yet
		flag: picoCTF{StaT31355_636f6e6e} 
	like1000 - learned about .tar files, sort of the .zip equivalent for Linux; wrote a Python script making use of the tarfile module to decompress a .tar within a .tar within a... etc... 1000 times
		flag: picoCTF{l0t5_0f_TAR5}
		
Cryptography
	The Numbers - download a .png that contains numbers; numbers represent letter position in alphabet and need to be decoded. Wrote a Python script. (for some reason the flag format was all uppercase)
		flag: PICOCTF{THENUMBERSMASON}
	13 - wrote a Python script to shift all letters the specified number of spaces (can be reused with a caesar cipher). caesar_cipher('cvpbPGS{abg_gbb_onq_bs_n_ceboyrz}', 13)
		flag: picoCTF{not_too_bad_of_a_problem}
	caesar - reused the Python script from the last problem with the addition of a for loop to loop through 13 possibilities.
		flag: picoCTF{crossingtherubiconojovpqjs}
	Flags - nautical alphabet signaling flags; found an image on Google Images and tranlated from there. (for some reason also in the all caps format)
		flag: PICOCTF{F1AG5AND5TUFF}
	Easy1 - one time pad cipher that included the following table. Pretty easy to decode, but would be interesting to write a Python script for.
		flag: picoCTF{picoCTF{CRYPTOISFUN}}
			A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 
		   +----------------------------------------------------
		A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
		B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A
		C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B
		D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C
		E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D
		F | F G H I J K L M N O P Q R S T U V W X Y Z A B C D E
		G | G H I J K L M N O P Q R S T U V W X Y Z A B C D E F
		H | H I J K L M N O P Q R S T U V W X Y Z A B C D E F G
		I | I J K L M N O P Q R S T U V W X Y Z A B C D E F G H
		J | J K L M N O P Q R S T U V W X Y Z A B C D E F G H I
		K | K L M N O P Q R S T U V W X Y Z A B C D E F G H I J
		L | L M N O P Q R S T U V W X Y Z A B C D E F G H I J K
		M | M N O P Q R S T U V W X Y Z A B C D E F G H I J K L
		N | N O P Q R S T U V W X Y Z A B C D E F G H I J K L M
		O | O P Q R S T U V W X Y Z A B C D E F G H I J K L M N
		P | P Q R S T U V W X Y Z A B C D E F G H I J K L M N O
		Q | Q R S T U V W X Y Z A B C D E F G H I J K L M N O P
		R | R S T U V W X Y Z A B C D E F G H I J K L M N O P Q
		S | S T U V W X Y Z A B C D E F G H I J K L M N O P Q R
		T | T U V W X Y Z A B C D E F G H I J K L M N O P Q R S
		U | U V W X Y Z A B C D E F G H I J K L M N O P Q R S T
		V | V W X Y Z A B C D E F G H I J K L M N O P Q R S T U
		W | W X Y Z A B C D E F G H I J K L M N O P Q R S T U V
		X | X Y Z A B C D E F G H I J K L M N O P Q R S T U V W
		Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X
		Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y
	waves over lambda - used a cryptography websit for this frequency analysis problem; https://crypto.interactive-maths.com/frequency-analysis-breaking-the-code.html (could have used Python, I have a nice module for this, but not on this computer...)
		flag: picoCTF{frequency_is_c_over_lambda_mupgpennod}
	la cifre de - used my cryptography module here and performed a brute-force Vigenere hack
		flag: picoCTF{b311a50_0r_v1gn3r3_c1ph3rb6cdf651}
	Tapping - developed 2 morse code dictionaries, one with Letters/Numbers as the keys, one with dots/dashes as the keys; then iterated over the message and translated back to text
		flag: PICOCTF{M0RS3C0D31SFUN1818224575}
	Mr. Worldwide - given a message that looks like a set of latitude/longitude coordinates,the first letter of each location (with a little imagination) spelled out KODIAK_ALASKA
		flag: picoCTF{KODIAK_ALASKA}
	rsa-pop-quiz - holy smokes.... this one took a hot minute; for the most part involved writing a Python file to generate/verify keys and calculate necessary values for RSA public/private keys (p, q, n, lambda(n) or totient(n), e, and d); from there a matter of stating whether specified operations were possible or not and then completing them if they were
		flag: 
	
Binary Exploitation
	practice-run-1 - simply used cd to navigate to the specified folder and use ls to identify the file to run, then ./ to run the file
		flag: picoCTF{g3t_r3adY_2_r3v3r53}
	handy-shellcode - followed a John Hammond video for this one; learned to run Python from the command line using 'python3 -c "<code here>" and piped the printed output to the function, | ./vuln, using the command 'cat' 
		flag: picoCTF{h4ndY_d4ndY_sh311c0d3_2cb0ff39}
	OverFlow 0 - started watching a John Hammond on Buffer Overflow from another CTF he did, and in the process of entering a long argument "A" *112 I happened to get the flag... Not sure why, I was expecting a segmentation fault or something like that
		flag: picoCTF{3asY_P3a5y1fcf81f9}
		
Web Exploitation
	Insp3ct0r - simply used F12 to inspect elements and piece together the flag from the html body, the css file (mycss.css), and a javascript file (myjss.jss)
		flag: picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?39dd9e36}
	where are the robots? - navigated to the pico web page https://2019shell1.picoctf.com/problem/32229/, and then added the location robots.txt and found a page specified, 0ecd0.html
		flag: picoCTF{ca1cu1at1ng_Mach1n3s_0ecd0}
	dont-use-client-side - given a website to navigate to the flag was simply cut up in a series of 'if' statements in the index.html source code
		flag: picoCTF{no_clients_plz_90ff34}
	logon - given a website we are asked to log on and get the flag; opened developer tools and found a 'flag' cookie; right-click and copy cURL, pasted into command line and found an option admin=False that I changed to True
		flag: picoCTF{th3_c0nsp1r4cy_l1v3s_9e21365b}
	
Reverse Engineering
	vault-door-training - open up the java file, find the flag and copy
		flag: picoCTF{w4rm1ng_Up_w1tH_jAv4_87f51143e4b}
	vault-door-1 - given a new java file, the password got scrambled in an array; I copied it to a text file that Python could read in and sort, printing back the flag
		flag: picoCTF{d35cr4mbl3_tH3_cH4r4cT3r5_8b748e}
	vault-door-3 - given another java file
		flag: 
	
